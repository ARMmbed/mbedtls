/* BEGIN_HEADER */
#include "opaque_test_driver.h"
#include "test/psa_crypto_helpers.h"

#define PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER ((psa_key_location_t) 0x5E)

uint8_t test_secp256r1_key_data[32] = {
    0xab, 0x45, 0x43, 0x57, 0x12, 0x64, 0x9c, 0xb3,
    0x0b, 0xbd, 0xda, 0xc4, 0x91, 0x97, 0xee, 0xbf,
    0x27, 0x40, 0xff, 0xc7, 0xf8, 0x74, 0xd9, 0x24,
    0x4c, 0x34, 0x60, 0xf5, 0x4f, 0x32, 0x2d, 0x3a,
};
uint8_t test_hash_32[32] = {
    0x9a, 0xc4, 0x33, 0x5b, 0x46, 0x9b, 0xbd, 0x79,
    0x14, 0x39, 0x24, 0x85, 0x04, 0xdd, 0x0d, 0x49,
    0xc7, 0x13, 0x49, 0xa2, 0x95, 0xfe, 0xe5, 0xa1,
    0xc6, 0x85, 0x07, 0xf4, 0x5a, 0x9e, 0x1c, 0x7b,
};
uint8_t test_signature_hash_32_with_secp256r1[64] = {
    0x6a, 0x33, 0x99, 0xf6, 0x94, 0x21, 0xff, 0xe1,
    0x49, 0x03, 0x77, 0xad, 0xf2, 0xea, 0x1f, 0x11,
    0x7d, 0x81, 0xa6, 0x3c, 0xf5, 0xbf, 0x22, 0xe9,
    0x18, 0xd5, 0x11, 0x75, 0xeb, 0x25, 0x91, 0x51,
    0xce, 0x95, 0xd7, 0xc2, 0x6c, 0xc0, 0x4e, 0x25,
    0x50, 0x3e, 0x2f, 0x7a, 0x1e, 0xc3, 0x57, 0x3e,
    0x3c, 0x24, 0x12, 0x53, 0x4b, 0xb4, 0xa1, 0x9b,
    0x3a, 0x78, 0x11, 0x74, 0x2f, 0x49, 0xf5, 0x0f,
 };

static void rot13( const uint8_t *in,
                   size_t len,
                   uint8_t *out )
{
    uint8_t c;
    for(; len ; len--, in++, out++)
    {
        c = *in;
        if (c >= 'a' && c <= 'm') { *out = c + 13; continue; }
        if (c >= 'A' && c <= 'M') { *out = c + 13; continue; }
        if (c >= 'n' && c <= 'z') { *out = c - 13; continue; }
        if (c >= 'N' && c <= 'Z') { *out = c - 13; continue; }
        *out = c;
    }
}
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_TEST_OPAQUE_TEST_DRIVER
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void opaque_test_driver_bad_param( )
{
    #define OPQ_BUFSIZE ( 64U + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE )
    size_t out_key_len;
    uint8_t in_key[16];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    uint8_t out_key[OPQ_BUFSIZE];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 128 );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_import_key( &attr,
                                               in_key,
                                               16,
                                               out_key,
                                               OPQ_BUFSIZE,
                                               &out_key_len ) );
    psa_set_key_type( &attr, PSA_KEY_TYPE_ARC4 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                opaque_test_driver_import_key( &attr,
                                               in_key,
                                               16,
                                               out_key,
                                               OPQ_BUFSIZE,
                                               &out_key_len ) );
    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 129 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                opaque_test_driver_import_key( &attr,
                                               in_key,
                                               16,
                                               out_key,
                                               OPQ_BUFSIZE,
                                               &out_key_len ) );
    psa_set_key_bits( &attr, 128 );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_import_key( &attr,
                                               in_key,
                                               17,
                                               out_key,
                                               OPQ_BUFSIZE,
                                               &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                opaque_test_driver_import_key( &attr,
                                               in_key,
                                               16,
                                               out_key,
                                               27,
                                               &out_key_len ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_generate_key( &attr,
                                                 out_key,
                                                 OPQ_BUFSIZE,
                                                 &out_key_len ) );
    psa_set_key_bits( &attr, 0 );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_generate_key( &attr,
                                                 out_key,
                                                 OPQ_BUFSIZE,
                                                 &out_key_len ) );
    psa_set_key_bits( &attr, 128 );
    psa_set_key_type( &attr, PSA_KEY_TYPE_ARC4 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                opaque_test_driver_generate_key( &attr,
                                                 out_key,
                                                 OPQ_BUFSIZE,
                                                 &out_key_len ) );
    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                opaque_test_driver_generate_key( &attr,
                                                 out_key,
                                                 27,
                                                 &out_key_len ) );
    psa_set_key_bits( &attr, 129 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                opaque_test_driver_generate_key( &attr,
                                                 out_key,
                                                 OPQ_BUFSIZE,
                                                 &out_key_len ) );
    psa_set_key_bits( &attr, 128 );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t* ) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    15,
                                    &out_key_len ) );

    /* Check validity of parameter set. */
    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH );
    psa_algorithm_t alg = PSA_ALG_DETERMINISTIC_ECDSA( PSA_ALG_SHA_256 );
    psa_set_key_algorithm( &attr, alg );
    psa_set_key_type( &attr,
                      PSA_KEY_TYPE_ECC_KEY_PAIR( PSA_ECC_CURVE_SECP_R1 ) );
    psa_set_key_bits( &attr, 256 );
    uint8_t key[OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32] =
    {
      /* Header */
      'O', 'P', 'Q', 'T', 'D', 'K', 'H', 'E', 'A', 'D', 'E', 'R',
      /* 0x4F, 0x50, 0x51, 0x54, 0x44, 0x4B, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, */
    };
    /* Encode the raw test vector key with ROT13. */
    rot13(test_secp256r1_key_data, sizeof(test_secp256r1_key_data),
          key + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE);

    PSA_ASSERT( opaque_test_driver_sign_hash(
                                 &attr,
                                 key,
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                 alg,
                                 in_key,
                                 16,
                                 out_key,
                                 OPQ_BUFSIZE,
                                 &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_sign_hash(
                                 &attr,
                                 key,
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                                 alg,
                                 in_key,
                                 16,
                                 out_key,
                                 OPQ_BUFSIZE,
                                 &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                opaque_test_driver_sign_hash(
                                 &attr,
                                 key,
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                 alg,
                                 in_key,
                                 16,
                                 out_key,
                                 63,
                                 &out_key_len ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_verify_hash(
                                 &attr,
                                 key,
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                 alg,
                                 test_hash_32,
                                 sizeof(test_hash_32),
                                 test_signature_hash_32_with_secp256r1,
                                 sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_verify_hash(
                                 &attr,
                                 key,
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                                 alg,
                                 test_hash_32,
                                 sizeof(test_hash_32),
                                 test_signature_hash_32_with_secp256r1,
                                 sizeof(test_signature_hash_32_with_secp256r1) ) );
exit:
    psa_reset_key_attributes(&attr);
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_export_public_key( char *in, char *exp_out )
{
    #define OPQ_BUFSIZE ( 32U + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE )
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    size_t out_len;
    uint8_t out[OPQ_BUFSIZE];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    PSA_ASSERT( opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) in,
                                    strlen(in),
                                    out,
                                    OPQ_BUFSIZE,
                                    &out_len));


    TEST_EQUAL( 0,
                mbedtls_test_hexcmp( out,
                                     (uint8_t *) exp_out,
                                     out_len,
                                     strlen(exp_out) ) );
exit:
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_generate_key( int type_arg, int bits_arg )
{
    #define OPQ_BUFSIZE ( 32U + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE )
    size_t key_len = 0;
    uint8_t key[OPQ_BUFSIZE];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, type_arg );
    psa_set_key_bits( &attr, bits_arg );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    PSA_ASSERT( opaque_test_driver_generate_key( &attr,
                                                                 key,
                                                                 OPQ_BUFSIZE,
                                                                 &key_len ) );
exit:
    psa_reset_key_attributes( &attr );
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_import_key( char *key_material )
{
    #define OPQ_BUFSIZE ( 32U + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE )
    size_t out_key_len = 0;
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    uint8_t out_key1[OPQ_BUFSIZE + 1];
    uint8_t out_key2[OPQ_BUFSIZE + 1];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, PSA_BYTES_TO_BITS( strlen( key_material) ) );

    TEST_ASSERT( strlen( key_material ) <= 32 );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    /* Import key. */
    PSA_ASSERT( opaque_test_driver_import_key( &attr,
                                               (uint8_t *) key_material,
                                               strlen( key_material ),
                                               out_key1,
                                               OPQ_BUFSIZE + 1,
                                               &out_key_len ) );

    TEST_EQUAL( strlen( key_material ) + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                out_key_len );
    out_key1[out_key_len] = '\0';

    /* Import the "imported" key (less key header). */
    PSA_ASSERT( opaque_test_driver_import_key(
                                    &attr,
                                    out_key1 +
                                        OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                                    strlen( (char *) out_key1 +
                                        OPAQUE_TEST_DRIVER_KEYHEADER_SIZE ),
                                    out_key2,
                                    OPQ_BUFSIZE + 1,
                                    &out_key_len ) );

    TEST_EQUAL( strlen( (char *) out_key1 ), out_key_len );
    out_key2[out_key_len] = '\0';

    /* The keys should be equal when ignoring key header. */
    TEST_EQUAL( 0,
                mbedtls_test_hexcmp( (uint8_t *) key_material,
                          out_key2 + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE,
                          strlen( key_material ),
                          strlen( (char *) out_key2 +
                              OPAQUE_TEST_DRIVER_KEYHEADER_SIZE ) ) );
exit:
    psa_reset_key_attributes( &attr );
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_invalid_param( )
{
    #define OPQ_BUFSIZE (64U + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE)
    size_t out_key_len;
    uint8_t in_key[16];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    uint8_t out_key[OPQ_BUFSIZE];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 128 );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_import_key( &attr,
                                               in_key,
                                               16,
                                               out_key,
                                               OPQ_BUFSIZE,
                                               &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_import_key(
                                                      NULL,
                                                      in_key,
                                                      16,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_import_key(
                                                      &attr,
                                                      NULL,
                                                      16,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_import_key(
                                                      &attr,
                                                      in_key,
                                                      16,
                                                      NULL,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_import_key(
                                                      &attr,
                                                      in_key,
                                                      16,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      NULL ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_generate_key(
                                                      &attr,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_generate_key(
                                                      NULL,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_generate_key(
                                                      &attr,
                                                      NULL,
                                                      OPQ_BUFSIZE,
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_generate_key(
                                                      &attr,
                                                      out_key,
                                                      OPQ_BUFSIZE,
                                                      NULL ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_export_public_key(
                                    NULL,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_export_public_key(
                                    &attr,
                                    NULL,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    NULL,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "OPQTDKHEADERHello world 1234",
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    NULL ) );

    /* Check validity of parameter set. */
    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH );
    psa_algorithm_t alg = PSA_ALG_DETERMINISTIC_ECDSA( PSA_ALG_SHA_256 );
    psa_set_key_algorithm( &attr, alg );
    psa_set_key_type( &attr,
                      PSA_KEY_TYPE_ECC_KEY_PAIR( PSA_ECC_CURVE_SECP_R1 ) );
    psa_set_key_bits( &attr, 256 );
    uint8_t key[OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32] =
    {
      /* Header */
      'O', 'P', 'Q', 'T', 'D', 'K', 'H', 'E', 'A', 'D', 'E', 'R',
      /* 0x4F, 0x50, 0x51, 0x54, 0x44, 0x4B, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, */
    };
    /* Encode the raw test vector key with ROT13. */
    rot13(test_secp256r1_key_data, sizeof(test_secp256r1_key_data),
          key + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE);

    PSA_ASSERT( opaque_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    in_key,
                                    16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_sign_hash(
                                    NULL,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    in_key,
                                    16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_sign_hash(
                                    &attr,
                                    NULL,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    in_key,
                                    16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    NULL,
                                    16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    in_key,
                                    16,
                                    NULL,
                                    OPQ_BUFSIZE,
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    in_key,
                                    16,
                                    out_key,
                                    OPQ_BUFSIZE,
                                    NULL ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( opaque_test_driver_verify_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_verify_hash(
                                    NULL,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                opaque_test_driver_verify_hash(
                                    &attr,
                                    NULL,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_verify_hash(
                                    &attr,
                                    key,
                                    OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                    alg,
                                    NULL,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                            opaque_test_driver_verify_hash(
                                   &attr,
                                   key,
                                   OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + 32,
                                   alg,
                                   test_hash_32,
                                   sizeof(test_hash_32),
                                   NULL,
                                   sizeof(test_signature_hash_32_with_secp256r1) ) );

exit:
    psa_reset_key_attributes(&attr);
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_sign_verify( int key_type_arg, data_t *key_data,
                                     int alg_arg, data_t *input_data )

{
    #define OPQ_BUFSIZE 128U
    size_t key_bits;
    uint8_t sign[OPQ_BUFSIZE];
    size_t sign_size;
    size_t sign_length = 0;
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH);
    psa_set_key_algorithm( &attr, alg_arg );
    psa_set_key_type( &attr, key_type_arg );
    psa_set_key_bits( &attr, PSA_BYTES_TO_BITS( key_data->len -
                                 OPAQUE_TEST_DRIVER_KEYHEADER_SIZE ) );

    psa_set_key_lifetime( &attr,
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    opaque_test_driver_set_key_lifetime(
                          PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(
                              PSA_KEY_PERSISTENCE_VOLATILE,
                              PSA_KEY_LOCATION_OPAQUE_TEST_DRIVER));

    /* Sign the data with the given key. */
    PSA_ASSERT( opaque_test_driver_sign_hash( &attr,
                                              key_data->x,
                                              key_data->len,
                                              alg_arg,
                                              input_data->x,
                                              input_data->len,
                                              sign,
                                              OPQ_BUFSIZE,
                                              &sign_length ) );

    key_bits = psa_get_key_bits( &attr );
    sign_size = PSA_SIGN_OUTPUT_SIZE( key_type_arg, key_bits, alg_arg );

    /* Verify the signature length. */
    TEST_EQUAL( sign_length, sign_size );

    /* Verify that the signature is correct. */
    PSA_ASSERT( opaque_test_driver_verify_hash( &attr,
                                                key_data->x,
                                                key_data->len,
                                                alg_arg,
                                                input_data->x,
                                                input_data->len,
                                                sign,
                                                sign_length ) );

    if( input_data->len != 0 )
    {
        /* Flip a bit in the input and verify that the signature is now
         * detected as invalid. Flip a bit at the beginning, not at the end,
         * because ECDSA may ignore the last few bits of the input. */
        input_data->x[0] ^= 1;
        TEST_EQUAL( PSA_ERROR_INVALID_SIGNATURE,
                    opaque_test_driver_verify_hash( &attr,
                                                    key_data->x,
                                                    key_data->len,
                                                    alg_arg,
                                                    input_data->x,
                                                    input_data->len,
                                                    sign,
                                                    sign_length ) );
    }

exit:
    psa_reset_key_attributes( &attr );
    PSA_DONE( );
    #undef OPQ_BUFSIZE
}
/* END_CASE */
