/* BEGIN_HEADER */
#include "drivers/transparent_test_driver.h"
#include "test/psa_crypto_helpers.h"

uint8_t test_secp256r1_key_data[32] = {
    0xab, 0x45, 0x43, 0x57, 0x12, 0x64, 0x9c, 0xb3,
    0x0b, 0xbd, 0xda, 0xc4, 0x91, 0x97, 0xee, 0xbf,
    0x27, 0x40, 0xff, 0xc7, 0xf8, 0x74, 0xd9, 0x24,
    0x4c, 0x34, 0x60, 0xf5, 0x4f, 0x32, 0x2d, 0x3a,
};
uint8_t test_hash_32[32] = {
    0x9a, 0xc4, 0x33, 0x5b, 0x46, 0x9b, 0xbd, 0x79,
    0x14, 0x39, 0x24, 0x85, 0x04, 0xdd, 0x0d, 0x49,
    0xc7, 0x13, 0x49, 0xa2, 0x95, 0xfe, 0xe5, 0xa1,
    0xc6, 0x85, 0x07, 0xf4, 0x5a, 0x9e, 0x1c, 0x7b,
};
uint8_t test_signature_hash_32_with_secp256r1[64] = {
    0x6a, 0x33, 0x99, 0xf6, 0x94, 0x21, 0xff, 0xe1,
    0x49, 0x03, 0x77, 0xad, 0xf2, 0xea, 0x1f, 0x11,
    0x7d, 0x81, 0xa6, 0x3c, 0xf5, 0xbf, 0x22, 0xe9,
    0x18, 0xd5, 0x11, 0x75, 0xeb, 0x25, 0x91, 0x51,
    0xce, 0x95, 0xd7, 0xc2, 0x6c, 0xc0, 0x4e, 0x25,
    0x50, 0x3e, 0x2f, 0x7a, 0x1e, 0xc3, 0x57, 0x3e,
    0x3c, 0x24, 0x12, 0x53, 0x4b, 0xb4, 0xa1, 0x9b,
    0x3a, 0x78, 0x11, 0x74, 0x2f, 0x49, 0xf5, 0x0f,
 };

/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_PSA_CRYPTO_C:MBEDTLS_PSA_CRYPTO_DRIVERS:TRANSPARENT_TEST_DRIVER
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void transparent_test_driver_bad_param( )
{
    size_t out_key_len;
    uint8_t in_key[16];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    uint8_t out_key[64U];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 128 );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    psa_set_key_bits( &attr, 0 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 256 );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      27,
                                                      &out_key_len ) );
    psa_set_key_bits( &attr, 129 );
    TEST_EQUAL( PSA_ERROR_NOT_SUPPORTED,
                transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    psa_set_key_bits( &attr, 128 );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_export_public_key(
                                 &attr,
                                 (uint8_t *) "Hello world 1234",
                                 16,
                                 out_key,
                                 sizeof(out_key),
                                 &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_export_public_key(
                                 &attr,
                                 (uint8_t* ) "Hello world 1234",
                                 0,
                                 out_key,
                                 sizeof(out_key),
                                 &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                transparent_test_driver_export_public_key(
                                 &attr,
                                 (uint8_t *) "Hello world 1234",
                                 16,
                                 out_key,
                                 15,
                                 &out_key_len ) );

    /* Check validity of parameter set. */
    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH );
    psa_algorithm_t alg = PSA_ALG_DETERMINISTIC_ECDSA( PSA_ALG_SHA_256 );
    psa_set_key_algorithm( &attr, alg );
    psa_set_key_type( &attr,
                      PSA_KEY_TYPE_ECC_KEY_PAIR( PSA_ECC_CURVE_SECP_R1 ) );
    psa_set_key_bits( &attr, 256 );
    const uint8_t *key = test_secp256r1_key_data;

    PSA_ASSERT( transparent_test_driver_sign_hash( &attr,
                                                   key,
                                                   32,
                                                   alg,
                                                   in_key,
                                                   16,
                                                   out_key,
                                                   sizeof(out_key),
                                                   &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash( &attr,
                                                   key,
                                                   0,
                                                   alg,
                                                   in_key,
                                                   16,
                                                   out_key,
                                                   sizeof(out_key),
                                                   &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_BUFFER_TOO_SMALL,
                transparent_test_driver_sign_hash( &attr,
                                                   key,
                                                   32,
                                                   alg,
                                                   in_key,
                                                   16,
                                                   out_key,
                                                   63,
                                                   &out_key_len ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_verify_hash(
                                 &attr,
                                 key,
                                 32,
                                 alg,
                                 test_hash_32,
                                 sizeof(test_hash_32),
                                 test_signature_hash_32_with_secp256r1,
                                 sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_verify_hash(
                                 &attr,
                                 key,
                                 0,
                                 alg,
                                 test_hash_32,
                                 sizeof(test_hash_32),
                                 test_signature_hash_32_with_secp256r1,
                                 sizeof(test_signature_hash_32_with_secp256r1) ) );
exit:
    psa_reset_key_attributes(&attr);
    PSA_DONE( );
}
/* END_CASE */

/* BEGIN_CASE */
void transparent_test_driver_export_public_key( char *in_key, char *exp_out_key )
{
    size_t out_key_len;
    uint8_t out_key[32U];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 128 );

    PSA_ASSERT( transparent_test_driver_export_public_key( &attr,
                                                           (uint8_t *) in_key,
                                                           strlen(in_key),
                                                           out_key,
                                                           sizeof(out_key),
                                                           &out_key_len));


    TEST_EQUAL( 0,
                mbedtls_test_hexcmp( out_key,
                                     (uint8_t *) exp_out_key,
                                     out_key_len,
                                     strlen(exp_out_key) ) );
exit:
    PSA_DONE( );
}
/* END_CASE */

/* BEGIN_CASE */
void transparent_test_driver_generate_key( int type_arg, int bits_arg )
{
    size_t key_len = 0;
    uint8_t key[32U];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, type_arg );
    psa_set_key_bits( &attr, bits_arg );

    PSA_ASSERT( transparent_test_driver_generate_key( &attr,
                                                      key,
                                                      sizeof(key),
                                                      &key_len ) );
exit:
    psa_reset_key_attributes( &attr );
    PSA_DONE( );
}
/* END_CASE */

/* BEGIN_CASE */
void transparent_test_driver_invalid_param( )
{
    size_t out_key_len;
    uint8_t in_key[32];
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    uint8_t out_key[64U];

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_type( &attr, PSA_KEY_TYPE_AES );
    psa_set_key_bits( &attr, 128 );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_generate_key( NULL,
                                                      out_key,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_generate_key( &attr,
                                                      NULL,
                                                      sizeof(out_key),
                                                      &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_generate_key( &attr,
                                                      out_key,
                                                      sizeof(out_key),
                                                      NULL ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "Hello world 1234",
                                    16,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_export_public_key(
                                    &attr,
                                    NULL,
                                    16,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "Hello world 1234",
                                    16,
                                    NULL,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_export_public_key(
                                    &attr,
                                    (uint8_t *) "Hello world 1234",
                                    16,
                                    out_key,
                                    sizeof(out_key),
                                    NULL ) );

    /* Check validity of parameter set. */
    psa_algorithm_t alg = PSA_ALG_DETERMINISTIC_ECDSA( PSA_ALG_SHA_256 );
    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH );
    psa_set_key_algorithm( &attr, alg );
    psa_set_key_type( &attr,
                      PSA_KEY_TYPE_ECC_KEY_PAIR( PSA_ECC_CURVE_SECP_R1 ) );
    psa_set_key_bits( &attr, 256 );
    const uint8_t *key = test_secp256r1_key_data;

    PSA_ASSERT( transparent_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    sizeof(test_secp256r1_key_data),
                                    alg,
                                    in_key,
                                    32,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash(
                                    NULL,
                                    key,
                                    32,
                                    alg,
                                    in_key,
                                    32,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash(
                                    &attr,
                                    NULL,
                                    32,
                                    PSA_ALG_ECDSA( PSA_ALG_SHA_256),
                                    in_key,
                                    32,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    NULL,
                                    32,
                                    out_key,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    in_key,
                                    32,
                                    NULL,
                                    sizeof(out_key),
                                    &out_key_len ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_sign_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    in_key,
                                    32,
                                    out_key,
                                    sizeof(out_key),
                                    NULL ) );

    /* Check validity of parameter set. */
    PSA_ASSERT( transparent_test_driver_verify_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_verify_hash(
                                    NULL,
                                    key,
                                    32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_verify_hash(
                                    &attr,
                                    NULL,
                                    32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_verify_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    NULL,
                                    sizeof(test_hash_32),
                                    test_signature_hash_32_with_secp256r1,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );
    TEST_EQUAL( PSA_ERROR_INVALID_ARGUMENT,
                transparent_test_driver_verify_hash(
                                    &attr,
                                    key,
                                    32,
                                    alg,
                                    test_hash_32,
                                    sizeof(test_hash_32),
                                    NULL,
                                    sizeof(test_signature_hash_32_with_secp256r1) ) );

exit:
    psa_reset_key_attributes(&attr);
    PSA_DONE( );
}
/* END_CASE */

/* BEGIN_CASE */
void transparent_test_driver_sign_verify( int key_type_arg, data_t *key_data,
                                int alg_arg, data_t *input_data )

{
    size_t key_bits;
    uint8_t sign[128U];
    size_t sign_size;
    size_t sign_length = 0;
    psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;

    PSA_ASSERT( psa_crypto_init() );

    psa_set_key_usage_flags( &attr, PSA_KEY_USAGE_SIGN_HASH |
                                    PSA_KEY_USAGE_VERIFY_HASH);
    psa_set_key_algorithm( &attr, alg_arg );
    psa_set_key_type( &attr, key_type_arg );
    psa_set_key_bits( &attr, PSA_BYTES_TO_BITS( key_data->len  ) );

    /* Sign the data with the given key. */
    PSA_ASSERT( transparent_test_driver_sign_hash( &attr,
                                                   key_data->x,
                                                   key_data->len,
                                                   alg_arg,
                                                   input_data->x,
                                                   input_data->len,
                                                   sign,
                                                   sizeof(sign),
                                                   &sign_length ) );

    key_bits = psa_get_key_bits( &attr );
    sign_size = PSA_SIGN_OUTPUT_SIZE( key_type_arg, key_bits, alg_arg );

    /* Check that the signature length looks sensible. */
    TEST_ASSERT( sign_size != 0 );
    TEST_ASSERT( sign_size <= PSA_SIGNATURE_MAX_SIZE );
    TEST_ASSERT( sign_size <= sizeof(sign) );
    TEST_ASSERT( sign_length <= sign_size );
    TEST_ASSERT( sign_length > 0 );

    /* Verify that the signature is correct. */
    PSA_ASSERT( transparent_test_driver_verify_hash( &attr,
                                                     key_data->x,
                                                     key_data->len,
                                                     alg_arg,
                                                     input_data->x,
                                                     input_data->len,
                                                     sign,
                                                     sign_length ) );

    if( input_data->len != 0 )
    {
        /* Flip a bit in the input and verify that the signature is now
         * detected as invalid. Flip a bit at the beginning, not at the end,
         * because ECDSA may ignore the last few bits of the input. */
        input_data->x[0] ^= 1;
        TEST_EQUAL( PSA_ERROR_INVALID_SIGNATURE,
                    transparent_test_driver_verify_hash(&attr,
                                                        key_data->x,
                                                        key_data->len,
                                                        alg_arg,
                                                        input_data->x,
                                                        input_data->len,
                                                        sign,
                                                        sign_length ) );
    }

exit:
    psa_reset_key_attributes( &attr );
    PSA_DONE( );
}
/* END_CASE */
